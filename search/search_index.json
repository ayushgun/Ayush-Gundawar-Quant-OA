{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apollo User Guide","text":"<p>Apollo is a CLI and Python module that allows you to parse and extract bulk submission data from Reddit subreddits.</p>"},{"location":"#overview","title":"Overview","text":"<p>Apollo is an effective tool that streamlines the process of interfacing with the Reddit API to fetch, parse, and extract valuable data from specified subreddits. The primary functionality involves retrieving submissions, and their associated metadata, from any subreddit based on various criteria.</p> <p>It sends structured requests to Reddit's API endpoints, fetching data from the returned JSON response. This data includes important details of subreddit posts, such as the post ID, author, score, title, body content, URL, number of comments, and the top 10 comments.</p> <p>This scraped data is then systematically parsed and transformed into data objects or dictionaries, depending on user preference. These organized data structures allow for simplified subsequent data analysis or processing.</p> <p>Apollo also offers the capability of storing this data efficiently in different formats. Users have the flexibility to choose between JSON for structured data storage or plain text for simpler needs. By providing the option of output format, Apollo ensures compatibility with a variety of downstream applications or data analysis workflows.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Search for posts in a subreddit containing a specific keyword.</li> <li>Retrieve top posts from the last 26 weeks of a specified subreddit.</li> <li>Fetch the top comments from the top posts of the last 26 weeks of a given subreddit.</li> <li>Save output data as a JSON file or dataclasses, based on your preference.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>Reddit application for API credentials (client id and client secret)</li> </ul>"},{"location":"#installation-and-setup","title":"Installation and Setup","text":"<ol> <li>Ensure that Python 3.9 or higher is installed on the machine.</li> <li>Clone the repository with git clone <code>https://github.com/ayushgun/apollo</code>.</li> <li>Create a Reddit application here. Save your <code>client id</code> &amp; <code>secret</code>.</li> <li>Input your Reddit application information in the .env configuration file. See the example below.</li> <li>Move to the Apollo directory with <code>cd src/apollo</code></li> <li>View the help menu with <code>python3 reddit.py --help</code></li> </ol>"},{"location":"#example-configuration","title":"Example Configuration","text":"<pre><code>client_id=YWcgWmkCtXdjNBoMOmom9D\nclient_secret=F9JKcHCdXrZNcv7K_KpEvErNJCjyfu\nusername=ayushgun\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Apollo provides a user-friendly command-line interface for interaction. You can perform three main tasks: keyword-search, top-posts, and top-comments. Check the command-line help for more detailed usage instructions.</p> <pre><code>python main.py --help\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#keyword-search","title":"Keyword Search","text":"<p>This command searches for posts in a subreddit that contain a specific keyword.</p> <p>Example usage:</p> <pre><code>python3 reddit.py keyword-search \"learnpython\" \"web scraping\" --sorting \"hot\" --interval \"week\" --output \"json\"\n</code></pre> <p>This command will search for posts in the \"learnpython\" subreddit that contain the keyword \"web scraping\". The posts are sorted by \"hot\" and are from the past week. The output will be stored in a JSON file.</p>"},{"location":"#top-posts","title":"Top Posts","text":"<p>This command fetches the top posts from the last 26 weeks of a given subreddit.</p> <p>Example usage:</p> <pre><code>python3 reddit.py top-posts \"news\" --output \"dataclass\"\n</code></pre> <p>This command will fetch the top posts from the past 26 weeks in the \"news\" subreddit. The output will be stored in a JSON file.</p>"},{"location":"#top-comments","title":"Top Comments","text":"<p>This command fetches the top comments from the top posts of the last 26 weeks of a given subreddit.</p> <p>Example usage:</p> <pre><code>python3 reddit.py top-comments \"AskReddit\"\n</code></pre> <p>This command will fetch the top comments from the top posts of the past 26 weeks in the \"AskReddit\" subreddit. The output will be stored in a JSON file.</p>"},{"location":"#output","title":"Output","text":"<p>Apollo stores the output data with a unique filename in an output directory. The path to the output file is displayed on the console upon successful completion of the operation.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>apollo<ul> <li>cli</li> <li>config</li> <li>models</li> <li>output</li> <li>reddit</li> </ul> </li> </ul>"},{"location":"reference/apollo/cli/","title":"cli","text":""},{"location":"reference/apollo/cli/#apollo.cli.cli","title":"<code>cli = typer.Typer(add_completion=False)</code>  <code>module-attribute</code>","text":""},{"location":"reference/apollo/cli/#apollo.cli.client","title":"<code>client = config.get_client()</code>  <code>module-attribute</code>","text":""},{"location":"reference/apollo/cli/#apollo.cli.config","title":"<code>config = RedditConfig('.env')</code>  <code>module-attribute</code>","text":""},{"location":"reference/apollo/cli/#apollo.cli.scraper","title":"<code>scraper = RedditScraper(client)</code>  <code>module-attribute</code>","text":""},{"location":"reference/apollo/cli/#apollo.cli.storage","title":"<code>storage = OutputManager()</code>  <code>module-attribute</code>","text":""},{"location":"reference/apollo/cli/#apollo.cli.comments_from_half_year","title":"<code>comments_from_half_year(subreddit_name: str, output: str = 'json') -&gt; list[list[Comment]]</code>","text":"<p>Fetches the top comments from the top posts of the last 26 weeks of a given subreddit.</p> <p>This method retrieves the top posts from the past 26 weeks in the subreddit and then fetches the top comments from these posts.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to fetch comments from.</p> required <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> <code>'json'</code> <p>Returns:</p> Type Description <code>list[list[Comment]]</code> <p>List of lists of models.Comment and each inner list represents the comments of a single post.</p> Source code in <code>src/apollo/cli.py</code> <pre><code>@cli.command(name=\"top-comments\")\ndef comments_from_half_year(\n    subreddit_name: str, output: str = \"json\"\n) -&gt; list[list[Comment]]:\n\"\"\"\n    Fetches the top comments from the top posts of the last 26 weeks of a given\n    subreddit.\n\n    This method retrieves the top posts from the past 26 weeks in the subreddit and\n    then fetches the top comments from these posts.\n\n    Args:\n        subreddit_name: Name of the subreddit to fetch comments from.\n        output: The type of output to generate (default is \"json\").\n\n    Returns:\n        (list[list[Comment]]): List of lists of models.Comment and each inner list\n            represents the comments of a single post.\n    \"\"\"\n\n    print(\"Scraping comment data...\")\n    comment_data = scraper.comments_from_half_year(subreddit_name, output)\n    storage.store_output(comment_data, output_type=output)\n</code></pre>"},{"location":"reference/apollo/cli/#apollo.cli.posts_from_half_year","title":"<code>posts_from_half_year(subreddit_name: str, output: str = 'json') -&gt; list[Post]</code>","text":"<p>Fetches the top posts from the last 26 weeks of a given subreddit.</p> <p>This method retrieves the top posts from the past year in the subreddit and then filters out the posts that were created in the last 26 weeks.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to fetch posts from.</p> required <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> <code>'json'</code> <p>Returns:</p> Type Description <code>list[Post]</code> <p>List of models.Post objects created in the last 26 weeks.</p> Source code in <code>src/apollo/cli.py</code> <pre><code>@cli.command(name=\"top-posts\")\ndef posts_from_half_year(subreddit_name: str, output: str = \"json\") -&gt; list[Post]:\n\"\"\"\n    Fetches the top posts from the last 26 weeks of a given subreddit.\n\n    This method retrieves the top posts from the past year in the subreddit and then\n    filters out the posts that were created in the last 26 weeks.\n\n    Args:\n        subreddit_name: Name of the subreddit to fetch posts from.\n        output: The type of output to generate (default is \"json\").\n\n    Returns:\n        (list[Post]): List of models.Post objects created in the last 26 weeks.\n    \"\"\"\n\n    print(\"Scraping post data...\")\n    post_data = scraper.posts_from_half_year(subreddit_name, output)\n    storage.store_output(post_data, output_type=output)\n</code></pre>"},{"location":"reference/apollo/cli/#apollo.cli.search_for_keyword","title":"<code>search_for_keyword(subreddit_name: str, search_query: str, sorting: str = 'hot', interval: str = 'day', output: str = 'json') -&gt; list[Post]</code>","text":"<p>Searches for posts in a subreddit that contain a specific keyword.</p> <p>Searches for posts in the subreddit that contain the search query in their title or body. The posts are sorted by a specified criteria (hot, new, top, etc.) and from a specific time interval.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to search in.</p> required <code>search_query</code> <code>str</code> <p>The keyword to search for.</p> required <code>sorting</code> <code>str</code> <p>The sorting criteria for the posts (default is \"hot\").</p> <code>'hot'</code> <code>interval</code> <code>str</code> <p>The time interval to consider for the posts (default is \"day\").</p> <code>'day'</code> <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> <code>'json'</code> <p>Returns:</p> Type Description <code>list[Post]</code> <p>List of models.Post objects that match the search criteria.</p> Source code in <code>src/apollo/cli.py</code> <pre><code>@cli.command(name=\"keyword-search\")\ndef search_for_keyword(\n    subreddit_name: str,\n    search_query: str,\n    sorting: str = \"hot\",\n    interval: str = \"day\",\n    output: str = \"json\",\n) -&gt; list[Post]:\n\"\"\"\n    Searches for posts in a subreddit that contain a specific keyword.\n\n    Searches for posts in the subreddit that contain the search query in their title\n    or body. The posts are sorted by a specified criteria (hot, new, top, etc.) and from\n    a specific time interval.\n\n    Args:\n        subreddit_name: Name of the subreddit to search in.\n        search_query: The keyword to search for.\n        sorting: The sorting criteria for the posts (default is \"hot\").\n        interval: The time interval to consider for the posts (default is \"day\").\n        output: The type of output to generate (default is \"json\").\n\n    Returns:\n        (list[Post]): List of models.Post objects that match the search criteria.\n    \"\"\"\n\n    print(\"Scraping post data...\")\n    post_data = scraper.search_for_keyword(\n        subreddit_name, search_query, sorting, interval, output\n    )\n    storage.store_output(post_data, output_type=output)\n</code></pre>"},{"location":"reference/apollo/config/","title":"config","text":""},{"location":"reference/apollo/config/#apollo.config.RedditConfig","title":"<code>RedditConfig</code>","text":"<p>A class that handles the configuration needed for Reddit API interaction.</p> <p>This class is responsible for loading environment variables and returning a praw.Reddit instance configured with these variables.</p> Source code in <code>src/apollo/config.py</code> <pre><code>class RedditConfig:\n\"\"\"\n    A class that handles the configuration needed for Reddit API interaction.\n\n    This class is responsible for loading environment variables and returning a\n    praw.Reddit instance configured with these variables.\n    \"\"\"\n\n    def __init__(self, config_file: str) -&gt; None:\n        dotenv.load_dotenv()\n        self.config = dotenv.dotenv_values(config_file)\n\n    def get_client(self) -&gt; praw.Reddit:\n\"\"\"\n        Returns a praw.Reddit instance configured with client id, client secret, and\n        user agent.\n\n        Returns:\n            (praw.Reddit): The configured Reddit instance.\n        \"\"\"\n\n        return praw.Reddit(\n            client_id=self.config[\"client_id\"],\n            client_secret=self.config[\"client_secret\"],\n            user_agent=(\n                f\"mac:{self.config['client_id']}:v1.0\"\n                f\" (by u/{self.config['username']})\"\n            ),\n        )\n</code></pre>"},{"location":"reference/apollo/config/#apollo.config.RedditConfig.config","title":"<code>config = dotenv.dotenv_values(config_file)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/config/#apollo.config.RedditConfig.__init__","title":"<code>__init__(config_file: str) -&gt; None</code>","text":"Source code in <code>src/apollo/config.py</code> <pre><code>def __init__(self, config_file: str) -&gt; None:\n    dotenv.load_dotenv()\n    self.config = dotenv.dotenv_values(config_file)\n</code></pre>"},{"location":"reference/apollo/config/#apollo.config.RedditConfig.get_client","title":"<code>get_client() -&gt; praw.Reddit</code>","text":"<p>Returns a praw.Reddit instance configured with client id, client secret, and user agent.</p> <p>Returns:</p> Type Description <code>Reddit</code> <p>The configured Reddit instance.</p> Source code in <code>src/apollo/config.py</code> <pre><code>def get_client(self) -&gt; praw.Reddit:\n\"\"\"\n    Returns a praw.Reddit instance configured with client id, client secret, and\n    user agent.\n\n    Returns:\n        (praw.Reddit): The configured Reddit instance.\n    \"\"\"\n\n    return praw.Reddit(\n        client_id=self.config[\"client_id\"],\n        client_secret=self.config[\"client_secret\"],\n        user_agent=(\n            f\"mac:{self.config['client_id']}:v1.0\"\n            f\" (by u/{self.config['username']})\"\n        ),\n    )\n</code></pre>"},{"location":"reference/apollo/models/","title":"models","text":""},{"location":"reference/apollo/models/#apollo.models.Comment","title":"<code>Comment</code>  <code>dataclass</code>","text":"<p>A dataclass representing scraped comment data.</p> <p>Attributes:</p> Name Type Description <code>author</code> <code>str</code> <p>the Reddit username of the post author.</p> <code>score</code> <code>int</code> <p>a total count of the post upvotes minus downvotes.</p> <code>body</code> <code>str</code> <p>the body content of the post.</p> Source code in <code>src/apollo/models.py</code> <pre><code>@dataclass\nclass Comment:\n\"\"\"\n    A dataclass representing scraped comment data.\n\n    Attributes:\n        author: the Reddit username of the post author.\n        score: a total count of the post upvotes minus downvotes.\n        body: the body content of the post.\n    \"\"\"\n\n    author: str\n    score: int\n    body: str\n</code></pre>"},{"location":"reference/apollo/models/#apollo.models.Comment.author","title":"<code>author: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Comment.body","title":"<code>body: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Comment.score","title":"<code>score: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post","title":"<code>Post</code>  <code>dataclass</code>","text":"<p>A dataclass representing scraped post data.</p> <p>Attributes:</p> Name Type Description <code>post_id</code> <code>str</code> <p>the post submission ID.</p> <code>author</code> <code>str</code> <p>the Reddit username of the post author.</p> <code>score</code> <code>int</code> <p>a total count of the post upvotes minus downvotes.</p> <code>title</code> <code>str</code> <p>the post submission title.</p> <code>body</code> <code>str</code> <p>the body content of the post.</p> <code>url</code> <code>str</code> <p>a permanent link to the Reddit post.</p> <code>num_comments</code> <code>int</code> <p>the total number of comments on the post.</p> <code>top_comments</code> <code>list[Comment]</code> <p>a list of the scores, authors, and contents of the top 10 comments on the post.</p> Source code in <code>src/apollo/models.py</code> <pre><code>@dataclass\nclass Post:\n\"\"\"\n    A dataclass representing scraped post data.\n\n    Attributes:\n        post_id: the post submission ID.\n        author: the Reddit username of the post author.\n        score: a total count of the post upvotes minus downvotes.\n        title: the post submission title.\n        body: the body content of the post.\n        url: a permanent link to the Reddit post.\n        num_comments: the total number of comments on the post.\n        top_comments: a list of the scores, authors, and contents of the top 10 comments\n            on the post.\n    \"\"\"\n\n    post_id: str\n    author: str\n    score: int\n    title: str\n    body: str\n    url: str\n    num_comments: int\n    top_comments: list[Comment]\n</code></pre>"},{"location":"reference/apollo/models/#apollo.models.Post.author","title":"<code>author: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.body","title":"<code>body: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.num_comments","title":"<code>num_comments: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.post_id","title":"<code>post_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.score","title":"<code>score: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.top_comments","title":"<code>top_comments: list[Comment]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/models/#apollo.models.Post.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/output/","title":"output","text":""},{"location":"reference/apollo/output/#apollo.output.OutputManager","title":"<code>OutputManager</code>","text":"<p>A class that manages the output of the CLI.</p> <p>This class is responsible for storing the output data from the CLI into a file in a specified format (JSON or dataclass).</p> Source code in <code>src/apollo/output.py</code> <pre><code>class OutputManager:\n\"\"\"\n    A class that manages the output of the CLI.\n\n    This class is responsible for storing the output data from the CLI into\n    a file in a specified format (JSON or dataclass).\n    \"\"\"\n\n    def store_output(self, result: Any, output_type: str) -&gt; None:\n\"\"\"\n        Stores the output data from the CLI into a file in a specified format.\n\n        Args:\n            result: The data to store.\n            output_type: The format to store the data in (default is \"json\").\n\n        Raises:\n            ValueError: occurs if the output type is not JSON or dataclass.\n\n        Returns:\n            (None)\n        \"\"\"\n\n        output_type = output_type.lower()\n        file_id = f\"{uuid.uuid4()}\"[:8]\n        file_ext = \"json\" if output_type == \"json\" else \"txt\"\n        file_path = f\"output/{file_id}.{file_ext}\"\n\n        with open(file_path, \"w\", encoding=\"utf8\") as file:\n            if output_type == \"json\":\n                json.dump(result, file)\n            elif output_type == \"dataclass\":\n                file.writelines(f\"{result}\")\n            else:\n                raise ValueError(f\"Invalid output type: {output_type}\")\n\n        print(f\"Successfully stored command output in ./{file_path}\")\n</code></pre>"},{"location":"reference/apollo/output/#apollo.output.OutputManager.store_output","title":"<code>store_output(result: Any, output_type: str) -&gt; None</code>","text":"<p>Stores the output data from the CLI into a file in a specified format.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>Any</code> <p>The data to store.</p> required <code>output_type</code> <code>str</code> <p>The format to store the data in (default is \"json\").</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>occurs if the output type is not JSON or dataclass.</p> <p>Returns:</p> Type Description <code>None</code> <p>(None)</p> Source code in <code>src/apollo/output.py</code> <pre><code>def store_output(self, result: Any, output_type: str) -&gt; None:\n\"\"\"\n    Stores the output data from the CLI into a file in a specified format.\n\n    Args:\n        result: The data to store.\n        output_type: The format to store the data in (default is \"json\").\n\n    Raises:\n        ValueError: occurs if the output type is not JSON or dataclass.\n\n    Returns:\n        (None)\n    \"\"\"\n\n    output_type = output_type.lower()\n    file_id = f\"{uuid.uuid4()}\"[:8]\n    file_ext = \"json\" if output_type == \"json\" else \"txt\"\n    file_path = f\"output/{file_id}.{file_ext}\"\n\n    with open(file_path, \"w\", encoding=\"utf8\") as file:\n        if output_type == \"json\":\n            json.dump(result, file)\n        elif output_type == \"dataclass\":\n            file.writelines(f\"{result}\")\n        else:\n            raise ValueError(f\"Invalid output type: {output_type}\")\n\n    print(f\"Successfully stored command output in ./{file_path}\")\n</code></pre>"},{"location":"reference/apollo/reddit/","title":"reddit","text":""},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper","title":"<code>RedditScraper</code>","text":"<p>A class that manages the scraping functionality of Reddit posts and comments.</p> <p>This class uses the Reddit API through PRAW to fetch posts and comments from a given subreddit based on certain criteria like keyword search or top posts from a specific period.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>A configured instance of the praw.Reddit class for interaction with Reddit's API.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>class RedditScraper:\n\"\"\"\n    A class that manages the scraping functionality of Reddit posts and comments.\n\n    This class uses the Reddit API through PRAW to fetch posts and comments from a given\n    subreddit based on certain criteria like keyword search or top posts from a specific\n    period.\n\n    Attributes:\n        client: A configured instance of the praw.Reddit class for\n            interaction with Reddit's API.\n    \"\"\"\n\n    def __init__(self, client: praw.Reddit) -&gt; None:\n        self.client = client\n\n    def fetch_comments(\n        self, post: praw.models.Post, output: str = \"json\"\n    ) -&gt; list[Comment]:\n\"\"\"\n        Fetches the top comments from a given list of Reddit comments.\n\n        Args:\n            post: Reddit post to fetch comments from.\n\n        Returns:\n            (list[Comment]): List of models.Comment, including its score, author, and\n                body content.\n        \"\"\"\n\n        post_comments = []\n\n        for comment in post.comments.list():\n            if (\n                isinstance(comment, praw.models.Comment)\n                and hasattr(comment, \"author\")\n                and hasattr(comment, \"score\")\n                and hasattr(comment, \"body\")\n            ):\n                comment = Comment(str(comment.author), comment.score, comment.body)\n                post_comments.append(comment.__dict__ if output == \"json\" else comment)\n\n        return post_comments\n\n    def validate_access(self, subreddit_name: str) -&gt; bool:\n\"\"\"\n        Validates the access to a given subreddit.\n\n        Args:\n            subreddit_name: Name of the subreddit to validate.\n\n        Returns:\n            (bool): True if the subreddit is accessible, False otherwise.\n        \"\"\"\n\n        try:\n            self.client.subreddit(subreddit_name).subreddit_type\n            return True\n        except Exception:\n            return False\n\n    def search_for_keyword(\n        self,\n        subreddit_name: str,\n        search_query: str,\n        sorting: str = \"hot\",\n        interval: str = \"day\",\n        output: str = \"json\",\n    ) -&gt; list[Post]:\n\"\"\"\n        Searches for posts in a subreddit that contain a specific keyword.\n\n        Searches for posts in the subreddit that contain the search query in their title\n        or body. The posts are sorted by a specified criteria (hot, new, top, etc.) and\n        from a specific time interval.\n\n        Args:\n            subreddit_name: Name of the subreddit to search in.\n            search_query: The keyword to search for.\n            sorting: The sorting criteria for the posts (default is \"hot\").\n            interval: The time interval to consider for the posts (default is\n                \"day\").\n            output: The type of output to generate (default is \"json\").\n\n        Raises:\n            ValueError: occurs when the scraper is unable to search posts or find the\n                subreddit.\n\n        Returns:\n            (list[Post]): List of models.Post objects that match the search criteria.\n        \"\"\"\n\n        if not self.validate_access(subreddit_name):\n            raise ValueError(\n                (\n                    f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                    \"you may not have correctly configured Apollo.\"\n                )\n            )\n\n        try:\n            subreddit = self.client.subreddit(subreddit_name)\n            search_results = subreddit.search(\n                query=search_query, sort=sorting, time_filter=interval\n            )\n        except requests.exceptions.RequestException as e:\n            raise ValueError(f\"An error occurred: {e}\")\n\n        post_data = []\n        for submission in search_results:\n            submission.comment_sort = \"confidence\"\n            submission.comment_limit = 10\n\n            post = Post(\n                post_id=submission.id,\n                author=str(submission.author),\n                score=submission.score,\n                title=submission.title,\n                body=submission.selftext,\n                url=f\"https://reddit.com{submission.permalink}\",\n                num_comments=submission.num_comments,\n                top_comments=self.fetch_comments(\n                    submission.comments.list(), output=output\n                ),\n            )\n\n            post_data.append(post.__dict__ if output == \"json\" else post)\n\n        return post_data\n\n    def posts_from_half_year(\n        self, subreddit_name: str, output: str = \"json\"\n    ) -&gt; list[Post]:\n\"\"\"\n        Fetches the top posts from the last 26 weeks of a given subreddit.\n\n        This method retrieves the top posts from the past year in the subreddit and then\n        filters out the posts that were created in the last 26 weeks.\n\n        Args:\n            subreddit_name: Name of the subreddit to fetch posts from.\n            output: The type of output to generate (default is \"json\").\n\n        Raises:\n            ValueError: occurs when the scraper is unable to find the subreddit.\n\n        Returns:\n            (list[Post]): List of models.Post objects created in the last 26 weeks.\n        \"\"\"\n\n        if not self.validate_access(subreddit_name):\n            raise ValueError(\n                (\n                    f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                    \"you may not have correctly configured Apollo.\"\n                )\n            )\n\n        subreddit = self.client.subreddit(subreddit_name.replace(\"r/\", \"\"))\n        top_posts = subreddit.top(time_filter=\"year\")\n\n        current_time = datetime.datetime.now(datetime.timezone.utc).timestamp()\n\n        post_data = []\n        for submission in top_posts:\n            if submission.created_utc &gt; current_time - 15720000:\n                submission.comment_sort = \"confidence\"\n                submission.comment_limit = 10\n\n                post = Post(\n                    post_id=submission.id,\n                    author=str(submission.author),\n                    score=submission.score,\n                    title=submission.title,\n                    body=submission.selftext,\n                    url=f\"https://reddit.com{submission.permalink}\",\n                    num_comments=submission.num_comments,\n                    top_comments=self.fetch_comments(submission, output=output),\n                )\n\n                post_data.append(post.__dict__ if output == \"json\" else post)\n\n        return post_data\n\n    def comments_from_half_year(\n        self, subreddit_name: str, output: str\n    ) -&gt; list[list[Comment]]:\n\"\"\"\n        Fetches the top comments from the top posts of the last 26 weeks of a given\n        subreddit.\n\n        This method retrieves the top posts from the past 26 weeks in the subreddit and\n        then fetches the top comments from these posts.\n\n        Args:\n            subreddit_name: Name of the subreddit to fetch comments from.\n            output: The type of output to generate (default is \"json\").\n\n        Returns:\n            (list[list[Comment]]): List of lists of models.Comment and each inner list\n                represents the comments of a single post.\n        \"\"\"\n\n        if not self.validate_access(subreddit_name):\n            raise ValueError(\n                (\n                    f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                    \"you may not have correctly configured Apollo.\"\n                )\n            )\n\n        subreddit = self.client.subreddit(subreddit_name.replace(\"r/\", \"\"))\n        top_posts = subreddit.top(time_filter=\"year\")\n\n        current_time = datetime.datetime.now(datetime.timezone.utc).timestamp()\n\n        comment_data = []\n\n        for submission in top_posts:\n            if submission.created_utc &gt; current_time - 15720000:\n                submission.comment_sort = \"confidence\"\n                submission.comment_limit = 10\n\n                comment_data.extend(self.fetch_comments(submission, output=output))\n\n        return comment_data\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.client","title":"<code>client = client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.__init__","title":"<code>__init__(client: praw.Reddit) -&gt; None</code>","text":"Source code in <code>src/apollo/reddit.py</code> <pre><code>def __init__(self, client: praw.Reddit) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.comments_from_half_year","title":"<code>comments_from_half_year(subreddit_name: str, output: str) -&gt; list[list[Comment]]</code>","text":"<p>Fetches the top comments from the top posts of the last 26 weeks of a given subreddit.</p> <p>This method retrieves the top posts from the past 26 weeks in the subreddit and then fetches the top comments from these posts.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to fetch comments from.</p> required <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> required <p>Returns:</p> Type Description <code>list[list[Comment]]</code> <p>List of lists of models.Comment and each inner list represents the comments of a single post.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>def comments_from_half_year(\n    self, subreddit_name: str, output: str\n) -&gt; list[list[Comment]]:\n\"\"\"\n    Fetches the top comments from the top posts of the last 26 weeks of a given\n    subreddit.\n\n    This method retrieves the top posts from the past 26 weeks in the subreddit and\n    then fetches the top comments from these posts.\n\n    Args:\n        subreddit_name: Name of the subreddit to fetch comments from.\n        output: The type of output to generate (default is \"json\").\n\n    Returns:\n        (list[list[Comment]]): List of lists of models.Comment and each inner list\n            represents the comments of a single post.\n    \"\"\"\n\n    if not self.validate_access(subreddit_name):\n        raise ValueError(\n            (\n                f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                \"you may not have correctly configured Apollo.\"\n            )\n        )\n\n    subreddit = self.client.subreddit(subreddit_name.replace(\"r/\", \"\"))\n    top_posts = subreddit.top(time_filter=\"year\")\n\n    current_time = datetime.datetime.now(datetime.timezone.utc).timestamp()\n\n    comment_data = []\n\n    for submission in top_posts:\n        if submission.created_utc &gt; current_time - 15720000:\n            submission.comment_sort = \"confidence\"\n            submission.comment_limit = 10\n\n            comment_data.extend(self.fetch_comments(submission, output=output))\n\n    return comment_data\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.fetch_comments","title":"<code>fetch_comments(post: praw.models.Post, output: str = 'json') -&gt; list[Comment]</code>","text":"<p>Fetches the top comments from a given list of Reddit comments.</p> <p>Parameters:</p> Name Type Description Default <code>post</code> <code>Post</code> <p>Reddit post to fetch comments from.</p> required <p>Returns:</p> Type Description <code>list[Comment]</code> <p>List of models.Comment, including its score, author, and body content.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>def fetch_comments(\n    self, post: praw.models.Post, output: str = \"json\"\n) -&gt; list[Comment]:\n\"\"\"\n    Fetches the top comments from a given list of Reddit comments.\n\n    Args:\n        post: Reddit post to fetch comments from.\n\n    Returns:\n        (list[Comment]): List of models.Comment, including its score, author, and\n            body content.\n    \"\"\"\n\n    post_comments = []\n\n    for comment in post.comments.list():\n        if (\n            isinstance(comment, praw.models.Comment)\n            and hasattr(comment, \"author\")\n            and hasattr(comment, \"score\")\n            and hasattr(comment, \"body\")\n        ):\n            comment = Comment(str(comment.author), comment.score, comment.body)\n            post_comments.append(comment.__dict__ if output == \"json\" else comment)\n\n    return post_comments\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.posts_from_half_year","title":"<code>posts_from_half_year(subreddit_name: str, output: str = 'json') -&gt; list[Post]</code>","text":"<p>Fetches the top posts from the last 26 weeks of a given subreddit.</p> <p>This method retrieves the top posts from the past year in the subreddit and then filters out the posts that were created in the last 26 weeks.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to fetch posts from.</p> required <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> <code>'json'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>occurs when the scraper is unable to find the subreddit.</p> <p>Returns:</p> Type Description <code>list[Post]</code> <p>List of models.Post objects created in the last 26 weeks.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>def posts_from_half_year(\n    self, subreddit_name: str, output: str = \"json\"\n) -&gt; list[Post]:\n\"\"\"\n    Fetches the top posts from the last 26 weeks of a given subreddit.\n\n    This method retrieves the top posts from the past year in the subreddit and then\n    filters out the posts that were created in the last 26 weeks.\n\n    Args:\n        subreddit_name: Name of the subreddit to fetch posts from.\n        output: The type of output to generate (default is \"json\").\n\n    Raises:\n        ValueError: occurs when the scraper is unable to find the subreddit.\n\n    Returns:\n        (list[Post]): List of models.Post objects created in the last 26 weeks.\n    \"\"\"\n\n    if not self.validate_access(subreddit_name):\n        raise ValueError(\n            (\n                f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                \"you may not have correctly configured Apollo.\"\n            )\n        )\n\n    subreddit = self.client.subreddit(subreddit_name.replace(\"r/\", \"\"))\n    top_posts = subreddit.top(time_filter=\"year\")\n\n    current_time = datetime.datetime.now(datetime.timezone.utc).timestamp()\n\n    post_data = []\n    for submission in top_posts:\n        if submission.created_utc &gt; current_time - 15720000:\n            submission.comment_sort = \"confidence\"\n            submission.comment_limit = 10\n\n            post = Post(\n                post_id=submission.id,\n                author=str(submission.author),\n                score=submission.score,\n                title=submission.title,\n                body=submission.selftext,\n                url=f\"https://reddit.com{submission.permalink}\",\n                num_comments=submission.num_comments,\n                top_comments=self.fetch_comments(submission, output=output),\n            )\n\n            post_data.append(post.__dict__ if output == \"json\" else post)\n\n    return post_data\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.search_for_keyword","title":"<code>search_for_keyword(subreddit_name: str, search_query: str, sorting: str = 'hot', interval: str = 'day', output: str = 'json') -&gt; list[Post]</code>","text":"<p>Searches for posts in a subreddit that contain a specific keyword.</p> <p>Searches for posts in the subreddit that contain the search query in their title or body. The posts are sorted by a specified criteria (hot, new, top, etc.) and from a specific time interval.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to search in.</p> required <code>search_query</code> <code>str</code> <p>The keyword to search for.</p> required <code>sorting</code> <code>str</code> <p>The sorting criteria for the posts (default is \"hot\").</p> <code>'hot'</code> <code>interval</code> <code>str</code> <p>The time interval to consider for the posts (default is \"day\").</p> <code>'day'</code> <code>output</code> <code>str</code> <p>The type of output to generate (default is \"json\").</p> <code>'json'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>occurs when the scraper is unable to search posts or find the subreddit.</p> <p>Returns:</p> Type Description <code>list[Post]</code> <p>List of models.Post objects that match the search criteria.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>def search_for_keyword(\n    self,\n    subreddit_name: str,\n    search_query: str,\n    sorting: str = \"hot\",\n    interval: str = \"day\",\n    output: str = \"json\",\n) -&gt; list[Post]:\n\"\"\"\n    Searches for posts in a subreddit that contain a specific keyword.\n\n    Searches for posts in the subreddit that contain the search query in their title\n    or body. The posts are sorted by a specified criteria (hot, new, top, etc.) and\n    from a specific time interval.\n\n    Args:\n        subreddit_name: Name of the subreddit to search in.\n        search_query: The keyword to search for.\n        sorting: The sorting criteria for the posts (default is \"hot\").\n        interval: The time interval to consider for the posts (default is\n            \"day\").\n        output: The type of output to generate (default is \"json\").\n\n    Raises:\n        ValueError: occurs when the scraper is unable to search posts or find the\n            subreddit.\n\n    Returns:\n        (list[Post]): List of models.Post objects that match the search criteria.\n    \"\"\"\n\n    if not self.validate_access(subreddit_name):\n        raise ValueError(\n            (\n                f\"Invalid subreddit: {subreddit_name}. If this error persists, \"\n                \"you may not have correctly configured Apollo.\"\n            )\n        )\n\n    try:\n        subreddit = self.client.subreddit(subreddit_name)\n        search_results = subreddit.search(\n            query=search_query, sort=sorting, time_filter=interval\n        )\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f\"An error occurred: {e}\")\n\n    post_data = []\n    for submission in search_results:\n        submission.comment_sort = \"confidence\"\n        submission.comment_limit = 10\n\n        post = Post(\n            post_id=submission.id,\n            author=str(submission.author),\n            score=submission.score,\n            title=submission.title,\n            body=submission.selftext,\n            url=f\"https://reddit.com{submission.permalink}\",\n            num_comments=submission.num_comments,\n            top_comments=self.fetch_comments(\n                submission.comments.list(), output=output\n            ),\n        )\n\n        post_data.append(post.__dict__ if output == \"json\" else post)\n\n    return post_data\n</code></pre>"},{"location":"reference/apollo/reddit/#apollo.reddit.RedditScraper.validate_access","title":"<code>validate_access(subreddit_name: str) -&gt; bool</code>","text":"<p>Validates the access to a given subreddit.</p> <p>Parameters:</p> Name Type Description Default <code>subreddit_name</code> <code>str</code> <p>Name of the subreddit to validate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the subreddit is accessible, False otherwise.</p> Source code in <code>src/apollo/reddit.py</code> <pre><code>def validate_access(self, subreddit_name: str) -&gt; bool:\n\"\"\"\n    Validates the access to a given subreddit.\n\n    Args:\n        subreddit_name: Name of the subreddit to validate.\n\n    Returns:\n        (bool): True if the subreddit is accessible, False otherwise.\n    \"\"\"\n\n    try:\n        self.client.subreddit(subreddit_name).subreddit_type\n        return True\n    except Exception:\n        return False\n</code></pre>"}]}